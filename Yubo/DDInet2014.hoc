load_file("nrngui.hoc")
load_file("mitral.hoc")
load_file("gc.hoc")
cvode.active(1)

Vrest = -65
dt = 1
celsius=35
tstop=500

objref nconp[10], net, netp[10], g, b, synp, nil, stim, apc
objref mt[10], gc[80], train, outfile, coeff[10], table
objref nc[]

strdef filename
outfile = new File()

table = new Vector()

for i=0,9 {
mt[i] = new Mitral()
coeff[i] = new Vector()
}

for i=0,79 {
gc[i] = new GC()
}

///////odor sensitivity of MCs
outfile.ropen("coeff-table.txt")
for i=0,9{
for j=0,8 {
coeff[i].append(outfile.scanvar())
}
coeff[i].printf()
}
outfile.close()

cx=3

weight=.1
amp=.03
rel=0.2
inh=13
synstr=2.3
nmdafactor=0.0035
frac=1

b = new VBox()
b.intercept(1)
g = new Graph()
g.size(0,tstop,-70,0)
g.xaxis(1)
g.addvar("mt[0].soma.v(0.5)",1,1,0.7,1,2)
g.addvar("mt[1].soma.v(0.5)",2,1,0.7,0.99,2)
g.addvar("mt[2].soma.v(0.5)",3,1,0.7,0.98,2)
g.exec_menu("10% Zoom out")
xpanel("",1)
xbutton("run", "run()")
xvalue("odor","cx")
xpanel()
b.intercept(0)
b.map()

///////////NetStim: presynaptic stimulus on MC, spike train. 
for i=0, 9 {
access mt[i].soma
	distance()
	netp[i] = new NetStim(0)
      ////trigger spike (first spike), then the average input current to MC.
	netp[i].number=1
	netp[i].interval=500
	netp[i].noise=0
      /////starting time 2ms.
	netp[i].start=2
      //////connect netp(presynaptic) to mt synodor object(postsynaptic), but weight?
	nconp[i]= new NetCon(netp[i],mt[i].synodor,0.5,0,weight*1.e-3) 
}

////////////////// circuit definition  

///// gc <-> mt
w0=1
w1=0.8
w2=0.4

nccount=0
cluster=0

 for i=0,9 {
   
   for k=0,7{
    
     for j=0,2 {
       nccount=nccount+1
       gc[cluster+i].dend[j*2]   nc[nccount] = new NetCon(&v(1),mt[k+j].igp[?][j],-40,1,inh*1e-3)

       nccount=nccount+1
       mt[k+j].secden[1]  nc[nccount]= new NetCon(&v(0),gc[cluster+i].synmt[j],-40,1,synstr*nmdafactor)

       nccount=nccount+1
       mt[k+j].secden[1]  nc[nccount]= new NetCon(&v(0),gc[cluster+i].sampa[j],-40,1,synstr*1e-3) 


              }

            }

  cluster=cluster+8
          }

////////////////// end circuit definition


proc init() {
	t=0
	finitialize(Vrest)
        fcurrent()
        forall {
		v=Vrest
		if (ismembrane("nax")) {e_pas=v+(ina+ik)/g_pas
		} else {
		e_pas=v+ik/g_pas
		}
	}
	cvode.re_init()
	g.begin()
	g.plot(t)
}

proc advance() {
	fadvance()
	g.plot(t)
	g.flush()
	doNotify()
}

////// x[i], returns the value for the index i
proc run() {
	for i=0, 9 {
	nconp[i].weight=coeff[i].x[cx-3]*1.e-3
	print i, nconp[i].weight
}
	stdinit()
	continuerun(tstop)
}
